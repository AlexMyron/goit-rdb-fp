p_1
CREATE SCHEMA pandemic;
USE pandemic;

================
// p_2a
CREATE TABLE countries (
    id INT PRIMARY KEY AUTO_INCREMENT,
    country_code VARCHAR(8) UNIQUE,
    country_name VARCHAR(55) NOT NULL
);

------------
// p_2b
INSERT INTO countries (country_code, country_name)
SELECT DISTINCT Code, Entity 
FROM infectious_cases;

------------
// p_2c
CREATE TABLE infectious_cases_normalized (
    id INT AUTO_INCREMENT PRIMARY KEY,
    Entity VARCHAR(45),
    Code CHAR(8),
    Year INT,
    Number_yaws INT,
    polio_cases INT,
    cases_guinea_worm INT,
    Number_rabies INT,
    Number_malaria INT,
    Number_hiv INT,
    Number_tuberculosis INT,
    Number_smallpox INT,
    Number_cholera_cases INT,
    FOREIGN KEY (Code) REFERENCES countries(country_code)
);

------------
// p_2d
INSERT INTO infectious_cases_normalized (
    Entity,
    Code,
    Year,
    Number_yaws,
    polio_cases,
    cases_guinea_worm,
    Number_rabies,
    Number_malaria,
    Number_hiv,
    Number_tuberculosis,
    Number_smallpox,
    Number_cholera_cases
)
SELECT DISTINCT 
    Entity,
    Code,
    Year,
    NULLIF(Number_yaws, '') AS Number_yaws,
    NULLIF(polio_cases, '') AS polio_cases,
    NULLIF(cases_guinea_worm, '') AS cases_guinea_worm,
    NULLIF(Number_rabies, '') AS Number_rabies,
    NULLIF(Number_malaria, '') AS Number_malaria,
    NULLIF(Number_hiv, '') AS Number_hiv,
    NULLIF(Number_tuberculosis, '') AS Number_tuberculosis,
    NULLIF(Number_smallpox, '') AS Number_smallpox,
    NULLIF(Number_cholera_cases, '') AS Number_cholera_cases
FROM 
    infectious_cases;

================
// p_3
SELECT 
	Entity, 
    Code,
    AVG(Number_rabies) AS average_rabies,
    MIN(Number_rabies) AS min_rabies,
    MAX(Number_rabies) AS max_rabies,
    SUM(Number_rabies) AS sum_rabies
FROM infectious_cases_normalized
WHERE Number_rabies IS NOT NULL AND Number_rabies != ''
GROUP BY Entity, Code
ORDER BY average_rabies DESC
LIMIT 10;

================
// p_4
ALTER TABLE infectious_cases_normalized
ADD first_jan DATE,
ADD curr_date DATE,
ADD year_difference INT;

SET SQL_SAFE_UPDATES = 0;

UPDATE infectious_cases_normalized
SET
    first_jan = DATE(CONCAT(Year, '-01-01')),
    curr_date = CURDATE(),
    year_difference = TIMESTAMPDIFF(YEAR, DATE(CONCAT(Year, '-01-01')), CURDATE())
WHERE Year IS NOT NULL;

SET SQL_SAFE_UPDATES = 1;


================
// p_5a
DROP FUNCTION IF EXISTS CalculateDateDifference;

DELIMITER //
CREATE FUNCTION CalculateDateDifference(year INT)
RETURNS INT
DETERMINISTIC
NO SQL
BEGIN
    RETURN TIMESTAMPDIFF(YEAR, DATE(CONCAT(year, '-01-01')), CURDATE());
END //

DELIMITER ;

SET SQL_SAFE_UPDATES = 0;

UPDATE infectious_cases_normalized
SET
  year_difference = CalculateDateDifference(Year);

SET SQL_SAFE_UPDATES = 1;

------------
// p_5b
DROP FUNCTION IF EXISTS CalculateDeseasesPerPeriod;

DELIMITER // 
CREATE FUNCTION CalculateDeseasesPerPeriod(deseases_per_year FLOAT, devisor INT)
RETURNS FLOAT
DETERMINISTIC 
NO SQL
BEGIN
	RETURN deseases_per_year / devisor;
END //

DELIMITER ;

SET @devisor_per_year = 1;
SET @devisor_per_half_year = 2;
SET @devisor_per_quartal = 4;

SELECT 
	Code, 
    Year, 
    Number_malaria, 
    CalculateDeseasesPerPeriod(Number_malaria, @devisor_per_year) AS malaria_per_year,
    CalculateDeseasesPerPeriod(Number_malaria, @devisor_per_half_year) AS malaria_per_half_year,
    CalculateDeseasesPerPeriod(Number_malaria, @devisor_per_quartal) AS malaria_per_quartal
FROM infectious_cases
WHERE Number_malaria IS NOT NULL AND Number_malaria != '';